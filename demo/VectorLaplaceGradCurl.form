# Copyright (C) 2007 Marie Rognes (meg@math.uio.no)
# Licensed under the GNU GPL version 3 or any later version
#
# The bilinear form a(v, u) and linear form L(v) for the Hodge Laplace
# problem using 0- and 1-forms. Intended to demonstrate use of Nedelec
# elements. 

# Compile this form with FFC: ffc VectorLaplaceGradCurl.form

def HodgeLaplaceGradCurl(element, felement):
    """This is a formulation of the Hodge Laplacian using k=1 and n=3,
    i.e 0-forms and 1-forms in 3D.

    Appropriate elements are

    GRAD \times CURL =    
         Lagrange_r \ times Ned^1_{r-1}
         Lagrange_{r+1} \ times Ned^2_{r}
    
    Only the 1st kind of Nedelec elements are implemented in FIAT.
    """

    (tau, v) = TestFunctions(element)
    (sigma, u) = TrialFunctions(element)
    f = Function(felement)
    a = (dot(tau, sigma) - dot(grad(tau), u) + 
        dot(v, grad(sigma)) + dot(curl(v), curl(u)))*dx
    L = dot(v, f)*dx
    return [a, L]

shape = "tetrahedron"
order = 1

GRAD = FiniteElement("Lagrange", shape, order)
CURL = FiniteElement("Nedelec", shape, order-1)
VectorLagrange = VectorElement("Lagrange", shape, order+1)

[a, L] = HodgeLaplaceGradCurl(GRAD + CURL, VectorLagrange)
