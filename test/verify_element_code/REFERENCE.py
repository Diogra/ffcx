references = {"FiniteElement('DG', 'interval', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', ''), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[2];\ncoords[0] = new double[1];\ncoords[1] = new double[1];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[1][0]);\n\nreturn 0;\n}\n', '0.6, 0.8, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '2'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[2];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\n\nreturn 0;\n}\n', '6\n7'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.56464, 0.71736, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[2] = {0,1};\ndouble vertex_values[2];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\n\nreturn 0;\n}\n', '0, 1, ')}, "FiniteElement('CG', 'interval', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[2];\ncoords[0] = new double[1];\ncoords[1] = new double[1];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[1][0]);\n\nreturn 0;\n}\n', '0.6, 0.8, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '2'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[2];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\n\nreturn 0;\n}\n', '3\n4'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.56464, 0.71736, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitInterval m(5);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[2] = {0,1};\ndouble vertex_values[2];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\n\nreturn 0;\n}\n', '0, 1, ')}, "FiniteElement('N1curl', 'triangle', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '2'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[3];\ncoords[0] = new double[2];\ncoords[1] = new double[2];\ncoords[2] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\n\nreturn 0;\n}\n', '0.3, 0.14286, 0.3, 0.071429, 0.2, 0.071429, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[3];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\n\nreturn 0;\n}\n', '8\n6\n0'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(2) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.059104, 0.13977, 0.055631, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[3] = {0,1,2};\ndouble vertex_values[6];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\n\nreturn 0;\n}\n', '-5, 14, 0, 14, 0, 7, ')}, "FiniteElement('CG', 'triangle', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '1\n2\n0\n2\n0\n1'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[3];\ncoords[0] = new double[2];\ncoords[1] = new double[2];\ncoords[2] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\n\nreturn 0;\n}\n', '0.2, 0, 0.2, 0.14286, 0.4, 0.14286, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[3];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\n\nreturn 0;\n}\n', '1\n7\n8'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.19867, 0.19867, 0.38942, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[3] = {0,1,2};\ndouble vertex_values[3];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\n\nreturn 0;\n}\n', '0, 1, 2, ')}, "FiniteElement('RT', 'tetrahedron', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2\n3\n3\n3'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[4];\ncoords[0] = new double[3];\ncoords[1] = new double[3];\ncoords[2] = new double[3];\ncoords[3] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[1][2]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[2][2]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[3][2]);\n\nreturn 0;\n}\n', '0.13333, 0.16667, 0.11111, 0.13333, 0.11111, 0.11111, 0.066667, 0.11111, 0.11111, 0.066667, 0.11111, 0, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '4'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[4];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\n\nreturn 0;\n}\n', '10\n1\n11\n12'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(3) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\nvalues[2] = sin(3*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.017568, 0.010182, 0.0029214, 0.0066223, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[4] = {0,1,2,3};\ndouble vertex_values[12];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\nprintf("%0.5g, ", vertex_values[6]);\nprintf("%0.5g, ", vertex_values[7]);\nprintf("%0.5g, ", vertex_values[8]);\nprintf("%0.5g, ", vertex_values[9]);\nprintf("%0.5g, ", vertex_values[10]);\nprintf("%0.5g, ", vertex_values[11]);\n\nreturn 0;\n}\n', '-90, -90, -90, 18, -60, 90, -18, -30, 90, -18, -30, 30, ')}, "FiniteElement('BDM', 'triangle', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2\n3\n4\n5'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '2'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[6];\ncoords[0] = new double[2];\ncoords[1] = new double[2];\ncoords[2] = new double[2];\ncoords[3] = new double[2];\ncoords[4] = new double[2];\ncoords[5] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[4][0]);\nprintf("%0.5g, ", coords[4][1]);\nprintf("%0.5g, ", coords[5][0]);\nprintf("%0.5g, ", coords[5][1]);\n\nreturn 0;\n}\n', '0.26667, 0.14286, 0.33333, 0.14286, 0.26667, 0.047619, 0.33333, 0.095238, 0.2, 0.047619, 0.2, 0.095238, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '6'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[6];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\nstd::cout << dofs[4] << std::endl;\nstd::cout << dofs[5] << std::endl;\n\nreturn 0;\n}\n', '16\n17\n12\n13\n0\n1'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(2) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(4, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(5, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '-0.10168, -0.12367, -0.064036, -0.076932, 0.028381, 0.028381, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[6] = {0,1,2,3,4,5};\ndouble vertex_values[6];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\n\nreturn 0;\n}\n', '21, -20, 42, -45, 14, -30, ')}, "FiniteElement('RT', 'triangle', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '2'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[3];\ncoords[0] = new double[2];\ncoords[1] = new double[2];\ncoords[2] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\n\nreturn 0;\n}\n', '0.3, 0.14286, 0.3, 0.071429, 0.2, 0.071429, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[3];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\n\nreturn 0;\n}\n', '8\n6\n0'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(2) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '-0.11293, -0.070711, 0.028381, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[3] = {0,1,2};\ndouble vertex_values[6];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\n\nreturn 0;\n}\n', '-14, -15, 14, -0, 7, -0, ')}, "FiniteElement('CG', 'tetrahedron', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '1\n2\n3\n0\n2\n3\n0\n1\n3\n0\n1\n2\n0\n1\n2\n0\n1\n2'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[4];\ncoords[0] = new double[3];\ncoords[1] = new double[3];\ncoords[2] = new double[3];\ncoords[3] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[1][2]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[2][2]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[3][2]);\n\nreturn 0;\n}\n', '0, 0, 0, 0, 0.16667, 0, 0.2, 0.16667, 0, 0.2, 0.16667, 0.33333, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '4'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[4];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\n\nreturn 0;\n}\n', '0\n6\n7\n49'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0, 0, 0.19867, 0.19867, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[4] = {0,1,2,3};\ndouble vertex_values[4];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\n\nreturn 0;\n}\n', '0, 1, 2, 3, ')}, "FiniteElement('DG', 'tetrahedron', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', ''), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[4];\ncoords[0] = new double[3];\ncoords[1] = new double[3];\ncoords[2] = new double[3];\ncoords[3] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[1][2]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[2][2]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[3][2]);\n\nreturn 0;\n}\n', '0, 0, 0, 0, 0.16667, 0, 0.2, 0.16667, 0, 0.2, 0.16667, 0.33333, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '4'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[4];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\n\nreturn 0;\n}\n', '12\n13\n14\n15'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0, 0, 0.19867, 0.19867, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[4] = {0,1,2,3};\ndouble vertex_values[4];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\n\nreturn 0;\n}\n', '0, 1, 2, 3, ')}, "FiniteElement('DG', 'triangle', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', ''), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[3];\ncoords[0] = new double[2];\ncoords[1] = new double[2];\ncoords[2] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\n\nreturn 0;\n}\n', '0.2, 0, 0.2, 0.14286, 0.4, 0.14286, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[3];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\n\nreturn 0;\n}\n', '9\n10\n11'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.19867, 0.19867, 0.38942, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[3] = {0,1,2};\ndouble vertex_values[3];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\n\nreturn 0;\n}\n', '0, 1, 2, ')}, "FiniteElement('DG', 'tetrahedron', 0)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', ''), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[1];\ncoords[0] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\n\nreturn 0;\n}\n', '0.1, 0.125, 0.083333, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[1];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\n\nreturn 0;\n}\n', '3'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.099833, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[1] = {0};\ndouble vertex_values[4];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\n\nreturn 0;\n}\n', '0, 0, 0, 0, ')}, "FiniteElement('DG', 'triangle', 0)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', ''), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[1];\ncoords[0] = new double[2];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\n\nreturn 0;\n}\n', '0.26667, 0.095238, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '1'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[1];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\n\nreturn 0;\n}\n', '3'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  \n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.26352, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitSquare m(5, 7);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[1] = {0};\ndouble vertex_values[3];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\n\nreturn 0;\n}\n', '0, 0, 0, ')}, "FiniteElement('BDM', 'tetrahedron', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n9\n10\n11\n9\n10\n11'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[12];\ncoords[0] = new double[3];\ncoords[1] = new double[3];\ncoords[2] = new double[3];\ncoords[3] = new double[3];\ncoords[4] = new double[3];\ncoords[5] = new double[3];\ncoords[6] = new double[3];\ncoords[7] = new double[3];\ncoords[8] = new double[3];\ncoords[9] = new double[3];\ncoords[10] = new double[3];\ncoords[11] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[1][2]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[2][2]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[3][2]);\nprintf("%0.5g, ", coords[4][0]);\nprintf("%0.5g, ", coords[4][1]);\nprintf("%0.5g, ", coords[4][2]);\nprintf("%0.5g, ", coords[5][0]);\nprintf("%0.5g, ", coords[5][1]);\nprintf("%0.5g, ", coords[5][2]);\nprintf("%0.5g, ", coords[6][0]);\nprintf("%0.5g, ", coords[6][1]);\nprintf("%0.5g, ", coords[6][2]);\nprintf("%0.5g, ", coords[7][0]);\nprintf("%0.5g, ", coords[7][1]);\nprintf("%0.5g, ", coords[7][2]);\nprintf("%0.5g, ", coords[8][0]);\nprintf("%0.5g, ", coords[8][1]);\nprintf("%0.5g, ", coords[8][2]);\nprintf("%0.5g, ", coords[9][0]);\nprintf("%0.5g, ", coords[9][1]);\nprintf("%0.5g, ", coords[9][2]);\nprintf("%0.5g, ", coords[10][0]);\nprintf("%0.5g, ", coords[10][1]);\nprintf("%0.5g, ", coords[10][2]);\nprintf("%0.5g, ", coords[11][0]);\nprintf("%0.5g, ", coords[11][1]);\nprintf("%0.5g, ", coords[11][2]);\n\nreturn 0;\n}\n', '0.1, 0.16667, 0.083333, 0.15, 0.16667, 0.083333, 0.15, 0.16667, 0.16667, 0.1, 0.083333, 0.083333, 0.15, 0.125, 0.083333, 0.15, 0.125, 0.16667, 0.05, 0.083333, 0.083333, 0.05, 0.125, 0.083333, 0.1, 0.125, 0.16667, 0.05, 0.083333, 0, 0.05, 0.125, 0, 0.1, 0.125, 0, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '12'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[12];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\nstd::cout << dofs[4] << std::endl;\nstd::cout << dofs[5] << std::endl;\nstd::cout << dofs[6] << std::endl;\nstd::cout << dofs[7] << std::endl;\nstd::cout << dofs[8] << std::endl;\nstd::cout << dofs[9] << std::endl;\nstd::cout << dofs[10] << std::endl;\nstd::cout << dofs[11] << std::endl;\n\nreturn 0;\n}\n', '30\n31\n32\n3\n4\n5\n33\n34\n35\n36\n37\n38'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(3) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\nvalues[2] = sin(3*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(4, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(5, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(6, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(7, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(8, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(9, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(10, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(11, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.013245, 0.019701, 0.019701, 0.0076983, 0.011399, 0.011399, 0.0022047, 0.0022047, 0.0043044, 0.0049813, 0.0049813, 0.0098507, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\ndouble vertex_values[12];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\nprintf("%0.5g, ", vertex_values[6]);\nprintf("%0.5g, ", vertex_values[7]);\nprintf("%0.5g, ", vertex_values[8]);\nprintf("%0.5g, ", vertex_values[9]);\nprintf("%0.5g, ", vertex_values[10]);\nprintf("%0.5g, ", vertex_values[11]);\n\nreturn 0;\n}\n', '-486, -405, 180, 54, -645, 300, -738, -555, 420, -522, -315, 240, ')}, "FiniteElement('N1curl', 'tetrahedron', 1)": {'tabulate_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nint n = dofmap.num_facet_dofs();\nunsigned int* dofs = new unsigned int[n];\n\n        dofmap.tabulate_facet_dofs(dofs, 0);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 1);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 2);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 3);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 4);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\n        dofmap.tabulate_facet_dofs(dofs, 5);\n        for (unsigned int i=0; i < n; i++) {\n          std::cout << dofs[i] << std::endl;\n        }\n        \n\nreturn 0;\n}\n', '0\n1\n2\n0\n3\n4\n1\n3\n5\n2\n4\n5\n2\n4\n5\n2\n4\n5'), 'value_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.value_dimension(0);\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '3'), 'tabulate_coordinates': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble** coords = new double*[6];\ncoords[0] = new double[3];\ncoords[1] = new double[3];\ncoords[2] = new double[3];\ncoords[3] = new double[3];\ncoords[4] = new double[3];\ncoords[5] = new double[3];\ndofmap.tabulate_coordinates(coords, cell);\nprintf("%0.5g, ", coords[0][0]);\nprintf("%0.5g, ", coords[0][1]);\nprintf("%0.5g, ", coords[0][2]);\nprintf("%0.5g, ", coords[1][0]);\nprintf("%0.5g, ", coords[1][1]);\nprintf("%0.5g, ", coords[1][2]);\nprintf("%0.5g, ", coords[2][0]);\nprintf("%0.5g, ", coords[2][1]);\nprintf("%0.5g, ", coords[2][2]);\nprintf("%0.5g, ", coords[3][0]);\nprintf("%0.5g, ", coords[3][1]);\nprintf("%0.5g, ", coords[3][2]);\nprintf("%0.5g, ", coords[4][0]);\nprintf("%0.5g, ", coords[4][1]);\nprintf("%0.5g, ", coords[4][2]);\nprintf("%0.5g, ", coords[5][0]);\nprintf("%0.5g, ", coords[5][1]);\nprintf("%0.5g, ", coords[5][2]);\n\nreturn 0;\n}\n', '0.2, 0.16667, 0.16667, 0.1, 0.16667, 0.16667, 0.1, 0.16667, 0, 0.1, 0.083333, 0.16667, 0.1, 0.083333, 0, 0, 0.083333, 0, '), 'space_dimension': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\nint dim = element.space_dimension();\nstd::cout << dim << std::endl;\n\nreturn 0;\n}\n', '6'), 'tabulate_dofs': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\nunsigned int dofs[6];\ndofmap.tabulate_dofs(dofs, mesh, cell);\nstd::cout << dofs[0] << std::endl;\nstd::cout << dofs[1] << std::endl;\nstd::cout << dofs[2] << std::endl;\nstd::cout << dofs[3] << std::endl;\nstd::cout << dofs[4] << std::endl;\nstd::cout << dofs[5] << std::endl;\n\nreturn 0;\n}\n', '0\n12\n13\n3\n4\n14'), 'num_facet_dofs': ('#include <iostream>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_dof_map_0 dofmap;\n\nunsigned int result = dofmap.num_facet_dofs();\n\nreturn 0;\n}\n', ''), 'evaluate_dof': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\n\nclass Source : public dolfin::Expression\n{\n  public:\n  Source() : Expression(3) {}\n\n\n\n  void eval(dolfin::Array<double>& values, const dolfin::Array<const double>& x) const\n  {\n    values[0] = sin(1*x[0]);\nvalues[1] = sin(2*x[0]);\nvalues[2] = sin(3*x[0]);\n   }\n};\n\nSource f;\n\ndouble result;\nresult = element.evaluate_dof(0, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(1, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(2, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(3, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(4, f, cell);\nprintf("%0.5g, ", result);\nresult = element.evaluate_dof(5, f, cell);\nprintf("%0.5g, ", result);\n\nreturn 0;\n}\n', '0.18821, 0.11847, 0.019967, 0.15158, 0.053078, 0, '), 'interpolate_vertex_values': ('#include <iostream>\n\n#include <dolfin/common/Array.h>\n#include <dolfin/mesh/Cell.h>\n#include <dolfin/mesh/UnitInterval.h>\n#include <dolfin/mesh/UnitSquare.h>\n#include <dolfin/mesh/UnitCube.h>\n#include <dolfin/function/Expression.h>\n#include <dolfin/fem/UFC.h>\n\n#include "element.h"\n\nint main()\n{\n\nelement_0_finite_element_0 element;\n\ndolfin::UnitCube m(5, 6, 3);\nm.init();\ndolfin::UFCMesh mesh(m);\ndolfin::UFCCell cell(dolfin::Cell(m, 3));\ndouble dof_values[6] = {0,1,2,3,4,5};\ndouble vertex_values[12];\nelement.interpolate_vertex_values(vertex_values, dof_values, cell);\nprintf("%0.5g, ", vertex_values[0]);\nprintf("%0.5g, ", vertex_values[1]);\nprintf("%0.5g, ", vertex_values[2]);\nprintf("%0.5g, ", vertex_values[3]);\nprintf("%0.5g, ", vertex_values[4]);\nprintf("%0.5g, ", vertex_values[5]);\nprintf("%0.5g, ", vertex_values[6]);\nprintf("%0.5g, ", vertex_values[7]);\nprintf("%0.5g, ", vertex_values[8]);\nprintf("%0.5g, ", vertex_values[9]);\nprintf("%0.5g, ", vertex_values[10]);\nprintf("%0.5g, ", vertex_values[11]);\n\nreturn 0;\n}\n', '-5, 30, -3, 10, 30, -3, -10, 36, 0, -5, 24, 0, ')}}