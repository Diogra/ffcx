
Features to consider for inclusion in future versions of UFC:



////////////////////////////////////////////////////////////////////////////////////////////////////
// For UFC 1.1:


- More efficient evaluation of all local dofs of a function f:

class finite_element
{
    /// Evaluate linear functionals for all dofs on the function f
    virtual void evaluate_dofs(double *values,
                                 const function& f,
                                 const cell& c) const
    { raise std::runtime_exception("Not implemented."); }
};


- Needed to derive the size of tabulate_coordinates from a single dof_map object:

class dof_map
{
    // Return the geometric dimension of the coordinates this dof map provides
    virtual unsigned int geometric_dimension() const
    { raise std::runtime_exception("Not implemented."); }
};


- Like tabulate_facet_dofs, which tabulates local dofs related to a facet, add functions to tabulate dofs related to any mesh entity.
  Useful for boundary conditions defined by vertex based MeshFunctions in linear Lagrange elements, and for getting all kinds of connectivity information.

class dof_map
{
    /// Return the number of dofs associated with each cell entity of dimension dim
    virtual unsigned int num_entity_dofs(unsigned int dim) const
    { raise std::runtime_exception("Not implemented."); }

    /// Tabulate the local-to-local mapping from dofs associated with entity i of dimension dim to cell dofs
    virtual void tabulate_entity_dofs(unsigned int* dofs,
                                      unsigned int dim, unsigned int i) const
    { raise std::runtime_exception("Not implemented."); }
};




////////////////////////////////////////////////////////////////////////////////////////////////////
// For later consideration:

- Various functions in class form and/or others, returning std::string's with readable names and descriptions.
  How much to include can of course be discussed. Missing items can simply return "".

  class form
  {
    // Name describing coefficient function i.
    // (F.ex. "f" for the typical right hand side,
    //  "mu" and "lambda" for linear elasticity
    //  and "Re" for Navier-Stokes).
    std::string coefficient_name(unsigned int i) const = 0;

    // Name of physical unit, if any, for coefficient function i.
    std::string coefficient_unit(unsigned int i) const = 0;

    // Name of integrals (could also be put in integral classes).
    std::string cell_integral_name(unsigned int i) const = 0;
    std::string exterior_facet_integral_name(unsigned int i) const = 0;
    std::string interior_facet_integral_name(unsigned int i) const = 0;
    
    // Name of underlying library or code generation tool.
    std::string library_name() const = 0;

    // Name of author.
    std::string author() const = 0;

    // Implementation in UFL, if applicable.
    std::string ufl() const = 0;

  };


- ?


