
def compile_tabulate_tensor_code(form, optimize=True):
    """This function is basically a mock controller which allows emulating the behaviour of ffc,
    by joining compute_ir, optimize_ir, and generate_ir.
    """

    from ffc.cpp import set_float_formatting
    from ffc.uflacsrepr import compute_integral_ir, optimize_integral_ir, generate_integral_code

    # Fake the initialization necessary to get this running through
    set_float_formatting(8)
    parameters = { "optimize": optimize }
    prefix = "uflacs_testing"
    form_id = 0

    # Apply ufl preprocessing
    form_data = form.compute_form_data()

    tt_codes = []
    for itg_data in form_data.integral_data:
        # Just make a fixed choice of cubic default quadrature rule for this test code
        itg_data.metadata["quadrature_degree"] = itg_data.metadata.get("quadrature_degree", 3)
        itg_data.metadata["quadrature_rule"] = itg_data.metadata.get("quadrature_rule", "default")

        # Call uflacs representation functions from ffc, which again calls the matching uflacs functions
        ir = compute_integral_ir(itg_data, form_data, form_id, parameters)
        if optimize:
            ir = optimize_integral_ir(ir, parameters)
        code = generate_integral_code(ir, prefix, parameters)

        # Store just the tabulate tensor part generated by uflacs
        tt_codes.append(code["tabulate_tensor"])

    # Just joint the tabulate tensor bodies and return
    code = ('\n' + '/'*60 + '\n').join(tt_codes)
    return code
