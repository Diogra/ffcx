#!/usr/bin/env python
"""
Tests of algorithm for factorization of integrand w.r.t. Argument terms.
"""

from ufltestcase import UflTestCase
from ufl import *

from uflacs.analysis.factorization import compute_argument_factorization

class TestFactorizationAlgorithm(UflTestCase):

    def test_foo(self):
        V = FiniteElement("CG", triangle, 1)
        f = Coefficient(V)
        g = Coefficient(V)
        u = TrialFunction(V)
        v = TestFunction(V)

        uc = u.count()
        vc = v.count()
        vi = 0
        ui = 1
        nodeps = ()
        noargs = {}
        nocoeffs = [(),]

        # Test basic non-argument terminal
        data = [
              (f, nodeps, noargs),
            ]
        expected_arg_sets = {}
        self._test_compute_argument_factorization(data, expected_arg_sets)

        # Test basic non-argument sum
        data = [
              (f, nodeps, noargs),
              (g, nodeps, noargs),
              (f+g, nodeps, noargs),
            ]
        expected_arg_sets = {}
        self._test_compute_argument_factorization(data, expected_arg_sets)

        # Test basic non-argument product
        data = [
              (f, nodeps, noargs),
              (g, nodeps, noargs),
              (f*g, nodeps, noargs),
            ]
        expected_arg_sets = {}
        self._test_compute_argument_factorization(data, expected_arg_sets)

        # Test basic single-argument-only expression
        data = [
              (v, nodeps, {(vi,): nocoeffs}),
            ]
        expected_arg_sets = {
              vc: { vi: v },
            }
        self._test_compute_argument_factorization(data, expected_arg_sets)

        # Test basic coefficient-argument product
        data = [
              (v, nodeps, {(vi,): nocoeffs}),
              (f, nodeps, {(ui,): nocoeffs}),
              (f*v, (0,1), {(vi,): ((1,),)}),
            ]
        expected_arg_sets = {
              vc: { vi: v },
            }
        self._test_compute_argument_factorization(data, expected_arg_sets)
        currently_fails_above_this_line

        # Test basic argument product
        data = [
              (v, nodeps, {(vi,): nocoeffs}),
              (u, nodeps, {(ui,): nocoeffs}),
              (u*v, (0,1), {(vi,): nocoeffs})
            ]
        expected_arg_sets = {
              vc: { vi: v },
              uc: { ui: u },
            }
        self._test_compute_argument_factorization(data, expected_arg_sets)
        currently_fails_above_this_line

    def _test_compute_argument_factorization(self, data, expected_arg_sets):
        svs = [] # Unused?
        SV = [d[0] for d in data]
        dependencies = [d[1] for d in data]
        expected_F = [d[2] for d in data]
        F, arg_sets = compute_argument_factorization(SV, svs, dependencies)
        self.assertEqual(F, expected_F)
        self.assertEqual(arg_sets, expected_arg_sets)


if __name__ == '__main__':
    import unittest
    unittest.main()
