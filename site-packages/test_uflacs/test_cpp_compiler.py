"""
Tests of generic C++ compilation code.
"""

from ufltestcase import UflTestCase

import uflacs
from uflacs.backends.cpp2.compiler import compile_form

import ufl
from ufl import as_ufl
from ufl import *

class CppCompilerTest(UflTestCase):

    def setUp(self):
        self.cell = cell2D
        self.U = FiniteElement("U", self.cell, 1)
        self.V = VectorElement("U", self.cell, 1)
        self.W = TensorElement("U", self.cell, 1)
        self.u = Coefficient(self.U)
        self.v = Coefficient(self.V)
        self.w = Coefficient(self.W)

    def test_cpp2_compile_scalar_literals(self):
        M = as_ufl(0)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = as_ufl(3)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = as_ufl(1.03)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

    def test_cpp2_compile_geometry(self):
        M = self.cell.volume*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = self.cell.x[0]*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

    def test_cpp2_compile_coefficients(self):
        M = self.u*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = self.v[0]*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = self.w[1,0]*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

    def test_cpp2_compile_sums(self):
        M = (2 + self.u)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = (self.v[1] + self.w[1,1] + 3 + self.u)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

    def test_cpp2_compile_products(self):
        M = (2*self.u)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

        M = (self.v[1] * self.w[1,1] * 3 * self.u)*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

    def xtest_cpp_compilation(self):
        M = u**2/2*dx
        code = compile_form(M, 'unittest')
        print '\n', code
        expected = 'TODO'
        self.assertEqual(code, expected)

