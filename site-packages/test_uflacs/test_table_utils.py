#!/usr/bin/env python
"""
Tests of generic table manipulation utilities.
"""

from ufltestcase import UflTestCase
#from uflacs.codeutils.table_utils import *

import numpy as np

def tables_equal(a, b, eps=1e-14):
    ash = np.shape(a)
    bsh = np.shape(b)
    if ash != bsh:
        return False
    r = len(ash)
    if r > 1:
        return all(tables_equal(a[i], b[i]) for i in range(ash[0]))
    def compare_equal(x, y, eps):
        return abs(x-y) < eps
    return all(compare_equal(a[i], b[i], eps) for i in range(ash[0]))

def strip_table_zeros(table):
    sh = np.shape(table)
    nzcol = [False]*sh[-1]
    offset = 0
    compacted = ()
    return offset, compacted

class TableUtilsTest(UflTestCase):

    def assertTablesEqual(self, a, b, eps=1e-14):
        self.assertEqual(np.shape(a), np.shape(b))
        self.assertTrue(tables_equal(a, b, eps))

    def assertNotTablesEqual(self, a, b, eps=1e-14):
        self.assertFalse(tables_equal(a, b, eps))

    def test_tables_equal(self):
        a = np.zeros((2,3))
        b = np.zeros((2,3))
        self.assertTablesEqual(a, b)

        a = np.ones((2,3))
        b = np.zeros((2,3))
        self.assertNotTablesEqual(a, b)

        a = np.ones((2,3))
        b = np.ones((3,2))
        self.assertNotTablesEqual(a, b)

        a = np.ones((2,3))*1.1
        b = np.ones((2,3))
        self.assertNotTablesEqual(a, b)

    def test_strip_table_zeros(self):
        a = np.zeros((2,3))
        e = np.zeros((2,0))
        offset, b = strip_table_zeros(a)
        self.assertEqual(offset, 0)
        self.assertTablesEqual(b, e)

if __name__ == '__main__':
    import unittest
    unittest.main()
