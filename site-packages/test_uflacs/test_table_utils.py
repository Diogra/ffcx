#!/usr/bin/env python
"""
Tests of generic table manipulation utilities.
"""

from ufltestcase import UflTestCase
#from uflacs.codeutils.table_utils import *

import numpy as np

default_tolerance = 1e-14

def tables_equal(a, b, eps=default_tolerance):
    "Compare tables to be equal within a tolerance."
    a = np.asarray(a)
    b = np.asarray(b)
    if a.shape != b.shape:
        return False
    if len(a.shape) > 1:
        return all(tables_equal(a[i], b[i]) for i in range(a.shape[0]))
    def scalars_equal(x, y, eps):
        return abs(x-y) < eps
    return all(scalars_equal(a[i], b[i], eps) for i in range(a.shape[0]))

def strip_table_zeros(table, eps=default_tolerance):
    "Strip zero columns from table. Returns column range (begin,end) and the new compact table."
    # Get shape of table and number of columns, defined as the last axis
    table = np.asarray(table)
    sh = table.shape
    nc = sh[-1]

    # Find first nonzero column
    begin = nc
    for i in range(nc):
        if np.linalg.norm(table[...,i]) > eps:
            begin = i
            break

    # Find (one beyond) last nonzero column
    end = begin
    for i in range(nc-1,begin-1,-1):
        if np.linalg.norm(table[...,i]) > eps:
            end = i+1
            break

    # Make subtable by stripping first and last columns
    return begin, end, table[...,begin:end]

class TableUtilsTest(UflTestCase):

    def assertTablesEqual(self, a, b, eps=default_tolerance):
        self.assertEqual(np.shape(a), np.shape(b))
        self.assertTrue(tables_equal(a, b, eps))

    def assertNotTablesEqual(self, a, b, eps=default_tolerance):
        self.assertFalse(tables_equal(a, b, eps))

    def test_tables_equal(self):
        a = np.zeros((2,3))
        b = np.zeros((2,3))
        self.assertTablesEqual(a, b)

        a = np.ones((2,3))
        b = np.zeros((2,3))
        self.assertNotTablesEqual(a, b)

        a = np.ones((2,3))
        b = np.ones((3,2))
        self.assertNotTablesEqual(a, b)

        a = np.ones((2,3))*1.1
        b = np.ones((2,3))
        self.assertNotTablesEqual(a, b)

    def test_strip_table_zeros(self):
        # Can strip entire table:
        a = np.zeros((2,3))
        e = np.zeros((2,0))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, a.shape[-1])
        self.assertEqual(end, a.shape[-1])
        self.assertEqual(begin, end) # This is a way to check for all-zero table
        self.assertTablesEqual(b, e)

        # Can keep entire nonzero table:
        a = np.ones((2,3))
        e = np.ones((2,3))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 0)
        self.assertEqual(end, a.shape[-1])
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

        # Can strip one left side column:
        a = np.ones((2,3))
        a[:,0] = 0.0
        e = np.ones((2,2))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 1)
        self.assertEqual(end, a.shape[-1])
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

        # Can strip one right side column:
        a = np.ones((2,3))
        a[:,2] = 0.0
        e = np.ones((2,2))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 0)
        self.assertEqual(end, a.shape[-1]-1)
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

        # Can strip two columns on each side:
        a = np.ones((2,5))
        a[:,0] = 0.0
        a[:,1] = 0.0
        a[:,3] = 0.0
        a[:,4] = 0.0
        e = np.ones((2,1))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 2)
        self.assertEqual(end, a.shape[-1]-2)
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

        # Can strip two columns on each side of rank 1 table:
        a = np.ones((5,))
        a[...,0] = 0.0
        a[...,1] = 0.0
        a[...,3] = 0.0
        a[...,4] = 0.0
        e = np.ones((1,))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 2)
        self.assertEqual(end, a.shape[-1]-2)
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

        # Can strip two columns on each side of rank 3 table:
        a = np.ones((3,2,5))
        a[...,0] = 0.0
        a[...,1] = 0.0
        a[...,3] = 0.0
        a[...,4] = 0.0
        e = np.ones((3,2,1))
        begin, end, b = strip_table_zeros(a)
        self.assertEqual(begin, 2)
        self.assertEqual(end, a.shape[-1]-2)
        self.assertNotEqual(begin, end)
        self.assertTablesEqual(b, e)

if __name__ == '__main__':
    import unittest
    unittest.main()
