from uflacs.utils.assertions import uflacs_assert
from uflacs.utils.log import warning

from ufl.classes import (Terminal, Indexed, Grad,
                         Restricted, PositiveRestricted, NegativeRestricted,
                         Coefficient, Argument,
                         SpatialCoordinate,
                         FacetNormal, FacetArea,
                         CellVolume, CellSurfaceArea, FacetArea, Circumradius)

def analyse_terminalish(o):
    t = o
    ngrads = 0
    r = ""
    while not isinstance(t, Terminal):
        if isinstance(t, Grad):
            t, = t.operands()
            ngrads += 1
        elif isinstance(t, Restricted):
            t, = t.operands()
            assert r == ""
            r = t._side
        else:
            error("Unexpected %s." % t)
    return (t, ngrads, r)

def coefficient_is_piecewise_constant(t):
    assert isinstance(t, Coefficient)
    e = t.element()
    return (e.family() == "Real" or
            (e.family() == "Discontinuous Galerkin" and e.degree() == 0))

class DefaultFormatterDependencyHandler(object):
    def __init__(self, object_names=None):
        # Mappings providing names of objects
        self.object_names = object_names or {}
        self.coefficient_names = {}
        self.argument_names = {}

        # A mapping { expr: {(c,d,r): code} } used to store visited dependencies
        self.required = {}

        # Lists used to store terminal objects visited
        self.terminals = []
        self.coefficients = []
        self.arguments = []

    def require(self, o, component, derivatives, restriction, code):
        "Helper function for remembering terminal-ish dependencies."

        s = self.required.get(o) or {}

        key = (tuple(component), tuple(derivatives), restriction)
        oldcode = s.get(key)
        uflacs_assert((not oldcode) or (oldcode == code),
                      "Generated different code for same expression.")
        s[key] = code

        self.required[o] = s
        return code

    def update_terminals(self, terminals):
        "Callback for updating set of terminals from inside compiler algorithm."

        # Store terminals in a stable sorting
        self.terminals = sorted(terminals, key=lambda x: repr(x))

        # Extract functions
        coefficients = set()
        arguments = set()
        for o in terminals:
            (t, ngrads, r) = analyse_terminalish(o)
            if isinstance(t, Coefficient):
                coefficients.add(t)
            elif isinstance(t, Argument):
                arguments.add(t)
        self.coefficients = sorted(coefficients, key=lambda x: x.count())
        self.arguments = sorted(arguments, key=lambda x: x.count())

        # Number and name functions, each coefficient name becomes a member name:
        for i, c in enumerate(self.coefficients):
            default = "w%d" % i
            self.coefficient_names[c] = self.object_names.get(id(c), default)

        for i, c in enumerate(self.arguments):
            default = "v%d" % i
            self.argument_names[c] = self.object_names.get(id(c), default)

class CppDefaultStatementFormatter(DefaultFormatterDependencyHandler):
    def __init__(self, object_names):
        DefaultFormatterDependencyHandler.__init__(self, object_names)

    # --- Functions for generating definitions and other statements

    def define_registers(self, num_registers):
        return ['double s[%d];' % (num_registers,)]

    def define_piecewise_geometry(self):
        return ["// Compute piecewise constant geometry and coeffs in DG0 and R."]

    def define_piecewise_coefficients(self):
        return ["// Compute coefficients in DG0 and R."]

    def define_quadrature_for_loop(self):
        return "for (int iq=0; iq<num_quadrature_points; ++iq)"

    def define_quadrature_loop_vars(self):
        return ["double x[3] = { quadpoints[iq][0], ... };"]

    def define_x_dependent_geometry(self):
        return ["// Compute x dependent geometry"]

    def define_x_dependent_coefficients(self):
        return ["// Compute x dependent coefficients and evt. their derivatives"]

    def define_argument_for_loop(self, argument_count):
        iname = "i%d" % (argument_count,)
        isize = "n%d" % (argument_count,)
        return "for (int %s = 0; %s < %s; ++%s)" % (iname, iname, isize, iname)

    def define_argument_loop_vars(self, argument_count):
        return ["// Compute argument %d and evt. its derivatives" % (argument_count,)]

    def output_variable_names(self, num_variables):
        return ["A[%d]" % (i,) for i in xrange(num_variables)]

class CppDefaultFormatter(CppDefaultStatementFormatter):
    """Example cpp formatter class, used for the test cases.
    Override the same functions for your particular target."""
    def __init__(self, object_names=None):
        CppDefaultStatementFormatter.__init__(self, object_names)

        # A FormArgument:FormArgument mapping to override
        # counts and elements of functions without rebuilding integrand
        self.form_argument_mapping = {}

    def spatial_coordinate(self, o, component=(), derivatives=(), restriction=None):
        if len(derivatives) > 1:
            warning("Compiler should be able to simplify derivatives of x!")
            return "0"

        # Restriction has no effect on x
        #postfix = {None:"", "+": "_p", "-": "_m"}[restriction]

        if component:
            i, = component
        else:
            i = 0

        if derivatives:
            warning("Compiler should be able to simplify derivatives of x!")
            d, = derivatives
            return "1" if i == d else "0"
        else:
            code = "x[%d]" % i
            self.require(o, component, derivatives, restriction, code)
            return code

    def _piecewise_constant_geometry(self, o,
                                     component, derivatives, restriction,
                                     basename):
        if derivatives:
            warning("Compiler should be able to simplify derivatives of constants!")
            return "0"

        postfix = {None:"", "+": "_p", "-": "_m"}[restriction]

        if component:
            i, = component # Assuming vector valued
            code = "%s%s[%d]" % (basename, postfix, i)
        else:
            code = "%s%s" % (basename, postfix)

        self.require(o, component, derivatives, restriction, code)
        return code

    def facet_normal(self, o, component=(), derivatives=(), restriction=None):
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "n")

    def cell_volume(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_vol")

    def circumradius(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_rad")

    def cell_surface_area(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_surf")

    def facet_area(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "F_area")

    def coefficient(self, o, component=(), derivatives=(), restriction=None):
        return self.form_argument(o, component, derivatives, restriction, 'w%d')

    def argument(self, o, component=(), derivatives=(), restriction=None):
        return self.form_argument(o, component, derivatives, restriction, 'v%d')

    def form_argument(self, o, component, derivatives, restriction, common_name):
        o = self.form_argument_mapping.get(o, o)
        count = o.count()
        uflacs_assert(count >= 0,
            "Expecting positive count, provide a renumbered form argument mapping.")

        base_name = (common_name % (count,))

        rcode = {None:"", "+": "_p", "-": "_m"}[restriction]

        def indstring(indices):
            # FIXME: Indexing flat or nested in C++?
            if 1:
                return "".join("[%s]" % i for i in indices)
            else:
                return ("[%s]" % (", ".join(map(str,indices))))

        if derivatives:
            dcodepre  = 'd%d_' % (len(derivatives),)
            dcodepost = indstring(derivatives)
        else:
            dcodepre, dcodepost = "", ""

        if component:
            icode = indstring(component)
        else:
            icode = ""

        code = dcodepre + base_name + rcode + icode + dcodepost

        self.require(o, component, derivatives, restriction, code)
        return code
