from uflacs.utils.assertions import uflacs_assert
from uflacs.utils.log import warning, error

from ufl.classes import (Terminal, Indexed, Grad,
                         Restricted, PositiveRestricted, NegativeRestricted,
                         Coefficient, Argument,
                         GeometricQuantity, SpatialCoordinate,
                         FacetNormal, FacetArea,
                         CellVolume, CellSurfaceArea, FacetArea, Circumradius)

from uflacs.codeutils.cpp_format import CppFormatterRulesCollection

# FIXME: This is probably implemented somewhere else
def flatten_component(component, shape, symmetry=None):
    assert not symmetry, "Not implemented"
    n = len(component)
    if n == 0:
        return 0
    elif n == 1:
        return component[0]
    else:
        # FIXME: Test this, or just use other existing implementation
        c = 0
        stride = 1
        for i in range(n):
            c += component[n-1-i]*stride
            if i < n-1:
                stride *= shape[n-1-i]
        return c

# FIXME: This is probably implemented somewhere else
def component_value_size(shape, symmetry=None):
    assert not symmetry, "Not implemented"
    n = len(shape)
    if n == 0:
        return 0
    elif n == 1:
        return shape[0]
    else:
        return product(shape)

def analyse_terminalish(o):
    t = o
    ngrads = 0
    r = ""
    while not isinstance(t, Terminal):
        if isinstance(t, Grad):
            ngrads += 1
            t, = t.operands()
        elif isinstance(t, Restricted):
            assert r == ""
            r = t._side
            t, = t.operands()
        else:
            error("Unexpected type %s object %s." % (type(t), repr(t)))
    return (t, ngrads, r)


class DependencyHandler(object):
    """Class used to collect dependencies during early compilation stages."""
    def __init__(self, object_names=None):
        # Mappings providing names of objects
        self.object_names = object_names or {}
        self.coefficient_names = {}
        self.argument_names = {}

        # A mapping { expr: {(c,d,r): code} } used to store visited dependencies
        self.required = {}

        # Lists used to store terminal objects visited
        self.terminals = []
        self.coefficients = []
        self.arguments = []

    def require(self, o, component, derivatives, restriction, code):
        "Helper function for remembering terminal-ish dependencies."

        s = self.required.get(o) or {}

        key = (tuple(component), tuple(derivatives), restriction)
        oldcode = s.get(key)
        uflacs_assert((not oldcode) or (oldcode == code),
                      "Generated different code for same expression.")
        s[key] = code

        self.required[o] = s
        return code

    def update_terminals(self, terminals):
        "Callback for updating set of terminals from inside compiler algorithm."

        # Store terminals in a stable sorting
        self.terminals = sorted(terminals, key=lambda x: repr(x))

        # Extract functions
        coefficients = set()
        arguments = set()
        for o in terminals:
            (t, ngrads, r) = analyse_terminalish(o)
            if isinstance(t, Coefficient):
                coefficients.add(t)
            elif isinstance(t, Argument):
                arguments.add(t)
        self.coefficients = sorted(coefficients, key=lambda x: x.count())
        self.arguments = sorted(arguments, key=lambda x: x.count())

        # Number and name functions, each coefficient name becomes a member name:
        for i, c in enumerate(self.coefficients):
            default = "w%d" % i
            self.coefficient_names[c] = self.object_names.get(id(c), default)

        for i, c in enumerate(self.arguments):
            default = "v%d" % i
            self.argument_names[c] = self.object_names.get(id(c), default)


class CppStatementFormatter(object):
    """Class containing functions for generating definitions of registers,
    argument loops, and output variable names."""
    def __init__(self, dependency_handler, cell):
        self._dependency_handler = dependency_handler
        self._cell = cell

        # FIXME: Make parameters:
        self._enable_accumulation = True
        self._enable_coord_loop = True
        self._num_points_name = "num_points"
        self._points_name = "points"
        self._weights_name = "weights"

    def define_registers(self, num_registers):
        return ['double s[%d];' % (num_registers,)]

    def define_piecewise_geometry(self):
        lines = ["// Compute piecewise constant geometry and coeffs in DG0 and R:"]

        # FIXME: Delegate this computation to cellcg!
        # A mapping { expr: {(c,d,r): code} } used to store visited dependencies
        for expr, req in self._dependency_handler.required.iteritems():
            if isinstance(expr, GeometricQuantity) and expr.is_cellwise_constant():
                for (c,d,r), code in req.iteritems():
                    impl = ["// TODO: Implement %s" % code]
                    lines += impl

        lines += [""]
        return lines

    def define_coord_loop(self):
        if self._enable_coord_loop:
            return ["for (int iq=0; iq<%s; ++iq)" % self._num_points_name]
        else:
            return None

    def define_coord_vars(self):
        # This should be sufficient for most uses
        code = []

        # Define coords
        # TODO: Parameter to pick behaviour here, defining x from xi or xi from x? (and we don't always need both...)
        if 1:
            code += ["const double *xi = &%s[%d*iq];" % (self._points_name, self._cell.topological_dimension())]
            #code += define x from xi
        else:
            code += ["const double *x = &%s[%d*iq];" % (self._points_name, self._cell.geometric_dimension())]
            #code += define xi from x

        # Define weights
        code += ["const double qw = %s[iq];" % (self._weights_name,)]
        code += ["const double D = qw * det;"] # FIXME: Use correct name for 'det', depending on integral type?
        return code

    def define_coord_dependent_geometry(self):
        lines = ["// Compute x dependent geometry"]

        # FIXME: Delegate this computation to cellcg!
        # A mapping { expr: {(c,d,r): code} } used to store visited dependencies
        for expr, req in self._dependency_handler.required.iteritems():
            if isinstance(expr, GeometricQuantity) and not expr.is_cellwise_constant():
                for (c,d,r), code in req.iteritems():
                    impl = ["// TODO: Implement %s" % code]
                    lines += impl

        lines += [""]
        return lines

    def accumulation_scaling_factor(self):
        if self._enable_accumulation:
            return "D"
        else:
            return None

    def define_piecewise_coefficients(self):
        return ["// Coefficients in DG0 and R are just fetched directly from ufc array w[][]", ""]

    def define_coord_dependent_coefficients(self):
        return ["// Compute x dependent coefficients and evt. their derivatives"]

    def define_argument_for_loop(self, argument_count):
        iname = "i%d" % (argument_count,)
        isize = "n%d" % (argument_count,)
        return "for (int %s = 0; %s < %s; ++%s)" % (iname, iname, isize, iname)

    def define_argument_loop_vars(self, argument_count):
        return ["// Compute argument %d and evt. its derivatives" % (argument_count,)]

    def output_variable_names(self, num_variables):
        return ["A[%d]" % (i,) for i in xrange(num_variables)]


class CppGeometryFormatterRules(object):
    def __init__(self, dependency_handler):
        self._dependency_handler = dependency_handler

    def geometric_quantity(self, o, component=(), derivatives=(), restriction=None):
        "Generic rendering of variable names for all piecewise constant geometric quantities."
        uflacs_assert(not derivatives,
                      "Compiler should be able to simplify derivatives of geometry.")

        # Simply using the UFL str to define the name in the generated code, ensures consistency
        name = str(o)
        if restriction:
            name = name + restriction

        # Indexing if there is a shape
        sh = o.shape()
        if sh:
            uflacs_assert(component, "Missing component for nonscalar %r." % o)
            code = "%s[%d]" % (name, flatten_component(component, sh, None))
        else:
            uflacs_assert(component == (), "Component specified for scalar %r." % o)
            code = name

        # Make a record of dependency
        self._dependency_handler.require(o, component, derivatives, restriction, code)

        return code

    def facet_area(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(restriction is None, "Assuming facet_area is not restricted.")
        return self.geometric_quantity(o, component, derivatives, restriction)


class CppFormArgumentFormatterRules(object):
    """Example cpp formatter class, used for the test cases.
    Override the same functions for your particular target."""
    def __init__(self, dependency_handler, form_argument_mapping):
        # A FormArgument:FormArgument mapping to override
        # counts and elements of functions without rebuilding integrand
        self._form_argument_mapping = form_argument_mapping
        self._dependency_handler = dependency_handler

    def _piecewise_constant_coefficient(self, o, component, derivatives, restriction):
        uflacs_assert(not derivatives,
                      "Not expecting derivatives of constant coefficients!")

        comp = flatten_component(component, o.shape(), o.element().symmetry())

        if restriction == '+':
            comp += component_value_size(o.shape(), o.element().symmetry())

        o = self._form_argument_mapping.get(o, o)
        return "w[%d][%d]" % (o.count(), comp)

    def coefficient(self, o, component=(), derivatives=(), restriction=None):
        if o.is_cellwise_constant():
            return self._piecewise_constant_coefficient(o, component, derivatives, restriction)
        else:
            return self.form_argument(o, component, derivatives, restriction, 'w%d')

    def argument(self, o, component=(), derivatives=(), restriction=None):
        return self.form_argument(o, component, derivatives, restriction, 'v%d')

    def form_argument(self, o, component, derivatives, restriction, common_name):
        o = self._form_argument_mapping.get(o, o)
        count = o.count()
        uflacs_assert(count >= 0,
            "Expecting positive count, provide a renumbered form argument mapping.")

        base_name = (common_name % (count,))

        rcode = {None:"", "+": "_p", "-": "_m"}[restriction]

        def indstring(indices):
            # FIXME: Indexing flat or nested in C++?
            if 1:
                return "".join("[%s]" % i for i in indices)
            else:
                return ("[%s]" % (", ".join(map(str,indices))))

        if derivatives:
            dcodepre  = 'd%d_' % (len(derivatives),)
            dcodepost = indstring(derivatives)
        else:
            dcodepre, dcodepost = "", ""

        if component:
            icode = indstring(component)
        else:
            icode = ""

        code = dcodepre + base_name + rcode + icode + dcodepost

        self._dependency_handler.require(o, component, derivatives, restriction, code)
        return code


from ufl.algorithms import MultiFunction
class CppLanguageFormatter(MultiFunction,
                           CppFormatterRulesCollection,
                           CppGeometryFormatterRules,
                           CppFormArgumentFormatterRules):
    """Example cpp formatter class, used for the test cases.
    Override the same functions for your particular target."""
    def __init__(self, dependency_handler, form_argument_mapping):
        MultiFunction.__init__(self)
        CppFormatterRulesCollection.__init__(self)
        CppGeometryFormatterRules.__init__(self, dependency_handler)
        CppFormArgumentFormatterRules.__init__(self, dependency_handler, form_argument_mapping)


def test():
    # Here's how to construct the new classes after refactoring:
    object_names = {}
    dependency_handler = DependencyHandler(object_names)

    form_argument_mapping = {}
    language_formatter = CppLanguageFormatter(dependency_handler, form_argument_mapping)

    cell = triangle
    statement_formatter = CppStatementFormatter(dependency_handler, cell) # TODO: Also needs to know about integration context
