from uflacs.utils.assertions import uflacs_assert
from uflacs.utils.log import warning

class CppDefaultFormatter(object):
    """Example cpp formatter class, used for the test cases.
    Override the same functions for your particular target."""
    def __init__(self):
        self.required = {}
        self.form_argument_numbering = {}

    def require(self, o, component, derivatives, restriction, code):
        s = self.required.get(o) or {}

        key = (tuple(component), tuple(derivatives))
        oldcode = s.get(key)
        uflacs_assert((not oldcode) or (oldcode == code),
                      "Generated different code for same expression.")
        s[key] = code

        self.required[o] = s
        return code

    def spatial_coordinate(self, o, component=(), derivatives=(), restriction=None):
        if len(derivatives) > 1:
            warning("Compiler should be able to simplify derivatives of x!")
            return "0"

        # Restriction has no effect on x
        #postfix = {None:"", "+": "_p", "-": "_m"}[restriction]

        if component:
            i, = component
        else:
            i = 0

        if derivatives:
            warning("Compiler should be able to simplify derivatives of x!")
            d, = derivatives
            return "1" if i == d else "0"
        else:
            code = "x[%d]" % i
            self.require(o, component, derivatives, restriction, code)
            return code

    def _piecewise_constant_geometry(self, o,
                                     component, derivatives, restriction,
                                     basename):
        if derivatives:
            warning("Compiler should be able to simplify derivatives of constants!")
            return "0"

        postfix = {None:"", "+": "_p", "-": "_m"}[restriction]

        if component:
            i, = component # Assuming vector valued
            code = "%s%s[%d]" % (basename, postfix, i)
        else:
            code = "%s%s" % (basename, postfix)

        self.require(o, component, derivatives, restriction, code)
        return code

    def facet_normal(self, o, component=(), derivatives=(), restriction=None):
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "n")

    def cell_volume(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_vol")

    def circumradius(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_rad")

    def cell_surface_area(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "K_surf")

    def facet_area(self, o, component=(), derivatives=(), restriction=None):
        uflacs_assert(not component, "Expecting no component for scalar value.")
        return self._piecewise_constant_geometry(o, component, derivatives,
                                                 restriction, "F_area")

    def coefficient(self, o, component=(), derivatives=(), restriction=None):
        return self.form_argument(o, component, derivatives, restriction, 'w%d')

    def argument(self, o, component=(), derivatives=(), restriction=None):
        return self.form_argument(o, component, derivatives, restriction, 'v%d')

    def form_argument(self, o, component, derivatives, restriction, common_name):
        count = self.form_argument_numbering.get(o, o.count())
        uflacs_assert(count >= 0,
            "Expecting positive count, provide a renumbered form argument mapping.")

        base_name = (common_name % (count,))

        rcode = {None:"", "+": "_p", "-": "_m"}[restriction]

        def indstring(indices):
            # FIXME: Indexing flat or nested in C++?
            if 1:
                return "".join("[%s]" % i for i in indices)
            else:
                return ("[%s]" % (", ".join(map(str,indices))))

        if derivatives:
            dcodepre  = 'd%d_' % (len(derivatives),)
            dcodepost = indstring(derivatives)
        else:
            dcodepre, dcodepost = "", ""

        if component:
            icode = indstring(component)
        else:
            icode = ""

        code = dcodepre + base_name + rcode + icode + dcodepost

        self.require(o, component, derivatives, restriction, code)
        return code
