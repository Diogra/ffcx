def compute_integral_ir(domain_type,
                        domain_id,
                        integrals,
                        metadata,
                        form_data,
                        form_id,
                        parameters,
                        common_cell=None):
    print "uflacs ir"

    # From ffc quadraturegenerator.py:
    num_facets = form_data.num_facets
    ir = {"representation":       "quadrature",
          "domain_type":          domain_type,
          "domain_id":            domain_id,
          "form_id":              form_id,
          "geometric_dimension":  form_data.geometric_dimension,
          "num_facets":           num_facets,
          "geo_consts":           {}}
    if 0:
        ir["prim_idims"] = prim_idims
        ir["quadrature_weights"]  = quad_weights
        ir["name_map"] = transformer.name_map
        ir["unique_tables"] = transformer.unique_tables
        ir["trans_integrals"] = terms
        ir["psi_tables_map"] = transformer.psi_tables_map
        ir["additional_includes_set"] = transformer.additional_includes_set

    return ir

def optimize_integral_ir(ir, parameters):
    print "uflacs oir"
    return ir

def generate_integral_code(ir, prefix, parameters):
    print "uflacs code"

    # Generate code
    code = {}
    if 0:
        # From ffc quadraturegenerator.py:
        code["classname"] = format["classname " + ir["domain_type"] + "_integral"](prefix, ir["form_id"], ir["domain_id"])
        code["members"] = ""
        code["constructor"] = format["do nothing"]
        code["constructor_arguments"] = ""
        code["initializer_list"] = ""
        code["destructor"] = format["do nothing"]
        code["tabulate_tensor"] = _tabulate_tensor(ir, parameters)
        code["tabulate_tensor_quadrature"] = format["exception"](tabulate_tensor_quadrature_error)
        code["additional_includes_set"] = ir["additional_includes_set"]

    return code
