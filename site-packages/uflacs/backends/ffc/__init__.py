
# TODO: Attach form_data.cell to target_formatter for geometry generation?
# TODO: Attach data from ffc to target_formatter for element generation?
# TODO: Move integrate to be a target_formatter property?

from ufl.classes import Argument
from uflacs.backends.cpp2.compiler import compute_expression_body_ir

def compute_tabulate_tensor_ir(ffc_data,
                               itg_data,
                               form_data,
                               parameters):
    # TODO: Just keep it simple now, and adjust the default
    #       formatter to match what we need for ffc

    #domain_type = itg_data.domain_type # TODO: Use this
    #cell = form_data.cell # TODO: Use this

    assert len(itg_data.integrals) == 1
    integrand = itg_data.integrals[0].integrand()

    argument_mapping = dict((k,v) for (k,v) in
                            form_data.function_replace_map.items()
                            if isinstance(k, Argument))
    assert len(argument_mapping) == form_data.rank

    uir = compute_expression_body_ir(integrand,
                                     argument_mapping,
                                     integrate=True)

    uir["function_replace_map"] = form_data.function_replace_map
    return uir


def optimize_tabulate_tensor_ir(ir, parameters):
    # TODO: Implement some optimization here!
    oir = ir
    return oir


from uflacs.codeutils.target_formatter import CppDefaultFormatter
from uflacs.backends.cpp2.compiler import generate_expression_body_code
from uflacs.codeutils.format_code_structure import format_code_structure

def generate_tabulate_tensor_code(ir, parameters):
    target_formatter = CppDefaultFormatter()
    target_formatter.form_argument_mapping = ir["function_replace_map"]

    # Use generic compiler routine to compile expression body
    code = generate_expression_body_code(ir, target_formatter)

    # Format uflacs specific code structure into a single string
    code = format_code_structure(code)
    return code
