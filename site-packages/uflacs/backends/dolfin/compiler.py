
from ufl.classes import Terminal, Indexed, SpatialDerivative
from ufl.algorithms import Graph, preprocess_expression
from uflacs.codeutils.cpp_format import CppFormatterRules
from uflacs.codeutils.expr_formatter import ExprFormatter
from uflacs.codeutils.format_code_structure import (format_code_structure,
                                                    Block, Indented, Namespace, Class)
from uflacs.backends.dolfin.dolfin_target_formatter import DolfinExpressionFormatter
from uflacs.backends.cpp2.compiler import compile_expression_partitions

def compile_expression_lines(expr, target_formatter):
    # FIXME: Implement this, dolfin-independent! Adapt cpp2 compiler code.
    return []

def compile_dolfin_expression_body(expr, object_names=None):
    if object_names is None:
        object_names = {}

    # Construct a dolfin C++ expression formatter
    target_formatter = DolfinExpressionFormatter(object_names)

    # Compile expression into partitioned code listings
    num_registers = 0 # FIXME: Need this information
    partition_codes, final_variable_names = \
                     compile_expression_partitions(expr, target_formatter)

    # FIXME: Join partitions with target specific loops and declarations
    if 1:
        listing = []
        for p,c in partition_codes:
            listing.append("// Code for partition %d" % (p,))
            listing.extend(c)

        # Generate code prelude
        prelude = []
        if num_registers:
            prelude += ['double s[%d];' % num_registers]

        # FIXME: Compute geometry based on what's required
        # FIXME: Compute coefficients based on what's required
        req = target_formatter.required
        term = target_formatter.terminals

        # Generate assignments to values[]
        assignment = ['values[%d] = %s;' % (i, c)
                      for i,c in enumerate(final_variable_names)]

        # Stitch it together
        # FIXME: Use loop formatting utilities to do this with partitions
        code = ['// Implementation of: %s' % str(expr),
                prelude,
                listing,
                assignment]

    # Get member function names TODO: Distinguish types of functions?
    member_names = dict(constants=[],
                        mesh_functions=[],
                        generic_functions=list(target_formatter.coefficient_names.values()),
                        functions=[],
                        )

    return code, member_names


def compile_dolfin_expression_class(expr, name, object_names):
    classname = 'UflacsExpression_%s' % name
    shape = expr.shape()

    eval_body, member_names = compile_dolfin_expression_body(expr, object_names)

    # Stitch together the full class
    code = format_dolfin_expression(classname=classname,
                                    shape=shape,
                                    eval_body=eval_body,
                                    **member_names)
    return code, classname

def format_uflacs_header(prefix, file_code):
    # Includes we're likely to need, no check for when they're not needed
    includes = ['#include <iostream>',
                '#include <cmath>',
                '#include <boost/shared_ptr.h>',
                '#include <dolfin.h>']

    # File guards
    define = 'UFLACS_' + prefix + '_INCLUDED'
    preguard = [('#ifndef ', define),
                ('#define ', define)]
    postguard = '#endif'

    # Stitch it together
    code = [preguard, '',
            includes, '',
            Namespace(prefix, file_code), '',
            postguard]
    return format_code_structure(code)

def compile_dolfin_expressions_header(expressions, object_names, prefix):
    # Generate code for each expression
    file_code = []
    classnames = []
    for k, expr in enumerate(expressions):
        name = object_names.get(id(expr), 'e%d' % k)
        code, classname = compile_dolfin_expression_class(expr, name, object_names)
        file_code.append(code)
        classnames.append(classname)

    # Wrap code from each file in its own namespace
    return format_uflacs_header(prefix, file_code)
