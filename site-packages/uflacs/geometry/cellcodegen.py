
class CellGeometryCG(object):
    """Code generation of cell related geometry snippets.

    x[]: global coordinates
    xi[]: local cell coordinates
    J[i*d+j]: d xi[i] / d x[j]
    x[i] = sum_j J[i*d+j]*xi[j] + v0[i]
    xi[i] = sum_j Jinv[i*d+j]*(x[j] - v0[i])
    """
    def __init__(self, celltype, gdim, tdim, restriction=''):
        self.celltype = celltype
        self.gdim = gdim
        self.tdim = tdim
        self.vars = {
            'celltype': celltype,
            'gdim': gdim,
            'tdim': tdim,
            'restriction': restriction,
            }
        names = {
            'v0':       'v0%(restriction)s' % self.vars,
            'J':        'J%(restriction)s' % self.vars,
            'Jinv':     'Jinv%(restriction)s' % self.vars,
            'detJ':     'detJ%(restriction)s' % self.vars,
            'absdetJ':  'absdetJ%(restriction)s' % self.vars,
            'signdetJ': 'signdetJ%(restriction)s' % self.vars,
            'x':        'x%(restriction)s' % self.vars,
            'xi':       'xi%(restriction)s' % self.vars,
            'n':        'n%(restriction)s' % self.vars,
            }
        # UFC specific!
        ufc_names = {
            'c':        'c%(restriction)s' % self.vars,
            'coords':   'c%(restriction)s.coordinates' % self.vars,
            }
        self.vars.update(names)
        self.vars.update(ufc_names)

    def v0_code(self):
        "UFC specific!"
        return "const double * %(v0)s = %(coords)s[0];" % self.vars

    def J_code(self):
        code = """
        double %(J)s[%(gdim)s*%(gdim)s];
        // FIXME
        """ % self.vars
        raise NotImplementedException

    def detJ_code(self):
        code = """
        double %(detJ)s;
        // FIXME
        """ % self.vars
        raise NotImplementedException

    def signdetJ_code(self):
        return "const double %(signdetJ)s = %(detJ)s >= 0.0 ? +1.0: -1.0;" % self.vars

    def absdetJ_code(self):
        return "const double %(absdetJ)s = %(detJ)s * %(signdetJ)s;" % self.vars

    def Jinv_code(self):
        code = """
        double %(Jinv)s[%(gdim)s*%(gdim)s];
        // FIXME
        """ % self.vars
        raise NotImplementedException

    def x_from_xi_code(self):
        code = """
        double %(x)s[%(gdim)s];
        // FIXME
        """ % self.vars
        raise NotImplementedException

    def xi_from_x_code(self):
        code = """
        double %(xi)s[%(gdim)s];
        // FIXME
        """ % self.vars
        raise NotImplementedException

    def n_code(self):
        code = """
        double %(n)s[%(gdim)s];
        // FIXME
        """ % self.vars
        raise NotImplementedException
