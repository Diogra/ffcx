
import numpy

def int_array(size):
    return numpy.zeros(size, dtype=int)

def object_array(size):
    # TODO: Any gain in using a numpy array for object lists?
    #return numpy.array(dtype=object)
    return [None]*size

class CRS(object):
    """A compressed row storage matrix with no sparsity pattern."""
    def __init__(self, row_capacity, element_capacity, dtype):
        self.row_offsets = int_array(row_capacity+1)
        self.data = numpy.zeros(element_capacity, dtype=dtype)
        self.num_rows = 0

    def push_row(self, elements):
        n = len(elements)
        a = self.row_offsets[self.num_rows]
        b = a + n
        self.data[a:b] = elements
        self.num_rows += 1
        self.row_offsets[self.num_rows] = b

    @property
    def num_elements(self):
        return self.row_offsets[self.num_rows]

    def __getitem__(self, row):
        if row < 0 or row >= self.num_rows:
            raise IndexError("Row number out of range!")
        a = self.row_offsets[row]
        b = self.row_offsets[row+1]
        return self.data[a:b]

    def __len__(self):
        return self.num_rows
