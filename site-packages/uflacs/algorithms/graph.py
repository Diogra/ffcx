
from uflacs.algorithms.graph_vertices import build_graph_vertices
from uflacs.algorithms.graph_symbols import build_graph_symbols
from uflacs.algorithms.graph_rebuild import rebuild_expression_from_graph

class Graph2(object):
    def __init__(self):
        pass

def build_graph(expr, DEBUG=False):
    # Make empty graph
    G = Graph2()

    # Populate with vertices
    G.e2i, G.V = build_graph_vertices(expr, DEBUG)
    G.nv = len(G.V)

    # Populate with symbols
    G.V_shapes, G.V_symbols, G.total_unique_symbols = build_graph_symbols(G.V, G.e2i, DEBUG)
    if DEBUG: assert G.total_unique_symbols == len(set(G.V_symbols.data))

    # TODO: Generate SSA representation, i.e. scalar ufl expressions

    # TODO: Generate symbol dependencies

    # TODO: What more information to generate?

    return G
