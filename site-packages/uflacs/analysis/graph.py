
from uflacs.analysis.graph_vertices import build_graph_vertices
from uflacs.analysis.graph_symbols import build_graph_symbols
from uflacs.analysis.graph_rebuild import rebuild_expression_from_graph

class Graph2(object):
    def __init__(self):
        pass

def build_graph(expr, DEBUG=False):

    # TODO: Take in list of expressions, then store expression_vertices in graph, to allow joining expressions in a shared graph!

    # Make empty graph
    G = Graph2()

    # Populate with vertices
    G.e2i, G.V, expression_vertices = build_graph_vertices([expr])
    G.nv = len(G.V)

    # Populate with symbols
    G.V_shapes, G.V_symbols, G.total_unique_symbols = \
                build_graph_symbols(G.V, G.e2i, DEBUG)

    if DEBUG:
        assert G.total_unique_symbols == len(set(G.V_symbols.data))

    return G
