__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2004-09-27 -- 2007-01-23"
__copyright__ = "Copyright (C) 2004-2007 Anders Logg"
__license__  = "GNU GPL Version 2"

# Python modules
import sys

# FFC common modules
sys.path.append("../../")
from ffc.common.debug import *
from ffc.common.exceptions import *

# FFC format modules
from ffc.format import dolfin
from ffc.format import latex

# FFC formlang modules
from ffc.formlang.index import *
from ffc.formlang.checks import *
from ffc.formlang.algebra import *
from ffc.formlang.reassign import *
from ffc.formlang.simplify import *

# FFC compiler modules
from elementtensor import *

class FormCode:

    # FIXME: This class should be named something else, FormCode is just
    # FIXME: a temporary name while restructuring the code
    
    """FormCode represents a multi-linear form typically appearing in
    the variational formulation of a partial differential equation.
    
    Attributes:

        form    - a Form representing the multi-linear form
        name    - a string, the name of the multi-linear form

    The following data is generated by the compiler:

        AK           - element tensor for cells
        ASe          - element tensors for exterior facets (list)
        ASi          - element tensors for interior facets (matrix)
        cK           - list of precomputed coefficient declarations for interior
        cSe          - list of precomputed coefficient declarations for exterior boundary
        cSi          - list of precomputed coefficient declarations for interior boundary
        rank         - primary rank of the multi-linear form
        dims         - list of primary dimensions
        indices      - list of primary indices
        nfunctions   - number of functions (coefficients)
        nprojections - number of projections (coefficients)
        nconstants   - number of constants
        test         - FiniteElement defining the test space
        trial        - FiniteElement defining the trial space
        elements     - list of FiniteElements for Functions
        projections  - list of corresponding projections
        format       - the format used to build the FormCode (a dictionary)
        shape        - shape on which the form is defined
        num_ops      - number of operations in computation of element tensor

    FIXME: Sketch for rewrite (follow UFC specification)

        signature        - a string identifying the form
        rank             - rank of the global tensor
        num_coefficients - the number of coefficients
        finite_elements  - list of finite elements for argument functions

    A multi-linear form is first expressed as an element of the
    algebra (a Form) and is then post-processed to generate a sum
    of ElementTensors, where each ElementTensor is expressed as
    a product of a ReferenceTensor and a GeometryTensor."""

    def __init__(self, form, name):
        "Create FormCode"

        # FIXME: Move computation from compiler to here

        # Initialize FormCode
        self.form = Form(form)
        self.name = name
        
        #print "input form:      " + str(self.form)
        #print "simplified form: " + str(simplify(self.form))

        # Reset data generated by the compiler
        self.AK          = None
        self.ASe         = None
        self.ASi         = None
        self.cK          = None
        self.cSe         = None
        self.cSi         = None
        self.rank        = None
        self.dims        = None
        self.indices     = None
        self.nfunctions  = 0
        self.projections = 0
        self.nconstants  = 0
        self.test        = None
        self.trial       = None
        self.elements    = None
        self.projections = None
        self.format      = None

        # Check that given form is valid
        check_form(form)

        # Reassign indices
        debug("Before index reassignment: " + str(form), 2)
        reassign_indices(self.form)
        
        return

    def reference_tensor(self, term = None):
        "Return interior reference tensor for given term."
        if term == None:
            if len(self.AK.terms) > 1:
                raise FormError, (self, "Form has more than one term and term not specified.")
            else:
                return self.AK.terms[0].A0.A0
        else:
            return self.AK.terms[term].A0.A0

    def primary_indices(self, term = None):
        "Return primary indices for interior reference tensor."
        if term == None:
            if len(self.AK.terms) > 1:
                raise FormError, (self, "Form has more than one term and term not specified.")
            else:
                return self.AK.terms[0].A0.i.indices
        else:
            return self.AK.terms[term].A0.i.indices

    def secondary_indices(self, term = None):
        "Return primary indices for interior reference tensor."
        if term == None:
            if len(self.AK.terms) > 1:
                raise FormError, (self, "Form has more than one term and term not specified.")
            else:
                return self.AK.terms[0].A0.a.indices
        else:
            return self.AK.terms[term].A0.a.indices

    def __str__(self):
        "Pretty print"
        return str(self.form)
