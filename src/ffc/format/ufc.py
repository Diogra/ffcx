"Code generation for the UFC 1.0 format."

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-01-08 -- 2007-01-08"
__copyright__ = "Copyright (C) 2007 Anders Logg"
__license__  = "GNU GPL Version 2"

# FFC common modules
from ffc.common.util import *
from ffc.common.debug import *
from ffc.common.constants import *

# FFC format modules
import ufcheaders

# Specify formatting for code generation
format = { "sum": lambda l: " + ".join(l),
           "subtract": lambda l: " - ".join(l),
           "multiplication": lambda l: "*".join(l),
           "grouping": lambda s: "(%s)" % s,
           "determinant": "det",
           "floating point": lambda a: "%.15e" % a,
           "constant": lambda j: "c%d" % j,
           "coefficient table": lambda j, k: "c[%d][%d]" % (j, k),
           "coefficient": lambda j, k: "c%d_%d" % (j, k),
           "transform": lambda j, k, r: "%s.g%d%d" % (r, j, k),
           "reference tensor" : lambda j, i, a: None,
           "geometry tensor": lambda j, a: "G%d_%s" % (j, "_".join(["%d" % index for index in a])),
           "element tensor": lambda i, k: "block[%d]" % k,
           "tmp declaration": lambda j, k: "const real tmp%d_%d" % (j, k),
           "tmp access": lambda j, k: "tmp%d_%d" % (j, k) }

def init(options):
    "Initialize code generation for the UFC 1.0 format."
    pass
    
def write(forms, options):
    "Generate code for the UFC 1.0 format."
    debug("Generating code for UFC 1.0")

    for form in forms:
    
        # Get name of form
        name = form.name

        # Write file header
        output = ""
        output += __write_header(name, options)

        # Write form
        output += "\n"
        output += __write_form(form, options)
    
        # Write file footer
        output += "\n"
        output += __write_footer(name, options)

        # Write file
        filename = name + ".h"
        file = open(filename, "w")
        file.write(output)
        file.close()
        debug("Output written to " + filename)

def __write_header(name, options):
    "Write file header"

    # Check if BLAS is required
    if options["blas"]:
        blas_include = "\n#include <cblas.h>"
        blas_warning = "\n// Warning: This code was generated with '-f blas' and requires cblas.h."
    else:
        blas_include = ""
        blas_warning = ""
        
    return """\
// This code conforms with the UFC specification version 1.0.
//
// This code was automatically generated by FFC version %s.%s

#ifndef __%s_H
#define __%s_H

#include <ufc.h>%s
""" % (FFC_VERSION, blas_warning, name.upper(), name.upper(), blas_include)

def __write_footer(name, options):
    "Write file footer"
    return """\
#endif
"""

def __write_dof_map(form, options):
    "Write ufc::dof_map"
    return ufcheaders.dof_map % (form.name,
                                 form.name,
                                 indent("// Not implemented", 4),
                                 form.name,
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4))

def __write_finite_element(form, options):
    "Write ufc::finite_element"

    return ufcheaders.finite_element % (form.name,
                                        form.name,
                                        indent("// Not implemented", 4),
                                        form.name,
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4),
                                        indent("// Not implemented", 4))

def __write_cell_integral(form, options):
    "Write ufc::cell_integral"

    return ufcheaders.cell_integral % (form.name,
                                       form.name,
                                       indent("// Not implemented", 4),
                                       form.name,
                                       indent("// Not implemented", 4),
                                       indent("// Not implemented", 4))

def __write_exterior_facet_integral(form, options):
    "Write ufc::exterior_facet_integral"

    return ufcheaders.exterior_facet_integral % (form.name,
                                                 form.name,
                                                 indent("// Not implemented", 4),
                                                 form.name,
                                                 indent("// Not implemented", 4),
                                                 indent("// Not implemented", 4))

def __write_interior_facet_integral(form, options):
    "Write ufc::interior_facet_integral"

    return ufcheaders.interior_facet_integral % (form.name,
                                                 form.name,
                                                 indent("// Not implemented", 4),
                                                 form.name,
                                                 indent("// Not implemented", 4),
                                                 indent("// Not implemented", 4))

def __write_form(form, options):
    "Write ufc::form"
    output = ""

    output += __write_dof_map(form, options)
    output += __write_finite_element(form, options)
    output += __write_cell_integral(form, options)
    output += __write_exterior_facet_integral(form, options)
    output += __write_interior_facet_integral(form, options)
    
    output += ufcheaders.form % (form.name,
                                 form.name,
                                 indent("// Not implemented", 4),
                                 form.name,
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4),
                                 indent("// Not implemented", 4))
    
    return output
