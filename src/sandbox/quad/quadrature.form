elements = ["Lagrange","Discontinuous Lagrange", "Crouzeix-Raviart", "Raviart-Thomas",\
            "Brezzi-Douglas-Marini", "Nedelec"]

shape = ["triangle", "tetrahedron"]

elem1 = FiniteElement(elements[1], shape[0], 1)
elem2 = VectorElement(elements[0], shape[0], 1)
elem3 = FiniteElement(elements[4], shape[0], 1)

#BDM = FiniteElement("Brezzi-Douglas-Marini", "triangle", 1)
#DG  = FiniteElement("Discontinuous Lagrange", "triangle", 0)
#mixed_element = BDM + DG
#(v, w) = TestFunctions(mixed_element)
#(q, u) = TrialFunctions(mixed_element)
#f = Function(DG)
#a = (dot(v, q) - div(v)*u + w*div(q))*dx

#elem3 = elem2
element = elem1# + elem2# + elem2

#v = TestFunction(element)
#u = TrialFunction(element)

#f = Function(element)

#element = VectorElement("Lagrange", "triangle", 1)

v = TestFunction(element)
u = TrialFunction(element)
n = FacetNormal("triangle")
h = MeshSize("triangle")
w = Function(element)

#a = v[i]*w[j]*D(u[i], j)*dx
#w0_a1(dXa2/dxa0) | vi0[b0]*va1[a0]*((d/dXa2)vi1[b0])*dX(0)
#(dXa0/dxb0)(dXa1/dxb0) | ((d/dXa0)vi0[b0])*((d/dXa1)vi1[b0])*dX(0)
#print v
#print u
#a = grad(w)[0]*v*u*dx
#a = v*u*ds + v*u*dx
#a = dot(jump(v,n), grad(u))*ds + dot(grad(v), jump(u,n))*ds
#a = dot(jump(v), jump(u))*dS
a = v('+')*u('-')*ds + v('+')*u('-')*ds + v*u*ds + 2*v*u*ds
#a = dot(avg(v),avg(u))*ds
#a = v('-')*n[0]('-')*u('+')*n[0]('+')*dS
#a = dot(v,u)*dx# + v*u*dx
#a = v[0]*u[1]*dx# + v*u*dx
#a = grad(v)[0][1]*grad(u)[1][0]*dx# + v*u*dx
#a = w*dot(grad(v), grad(u))*dx
#a = dot(grad(grad(v)),grad(grad(u)))*dx
#a = dot(div(grad(v)),div(grad(u)))*dx
#a = div(grad(v))*div(grad(u))*dx
#a = v*u*dx
#a = dot(grad(v('+')),grad(u('-')))*dS
#a = v*u*dx + dot(grad(v),grad(u))*dx
#a = v*u*dx + dot(grad(v),grad(u))*dx# + dot(grad(v('+')),grad(u('-')))*dS
#L = dot(v,f)*dx
