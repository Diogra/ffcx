elements = ["Lagrange","Discontinuous Lagrange", "Crouzeix-Raviart", "Raviart-Thomas",\
            "Brezzi-Douglas-Marini", "Nedelec"]

shape = ["triangle", "tetrahedron"]

elem1 = FiniteElement(elements[1], shape[0], 2)
elem2 = VectorElement(elements[0], shape[0], 1)
elem3 = FiniteElement(elements[4], shape[0], 1)

#BDM = FiniteElement("Brezzi-Douglas-Marini", "triangle", 1)
#DG  = FiniteElement("Discontinuous Lagrange", "triangle", 0)
#mixed_element = BDM + DG
#(v, w) = TestFunctions(mixed_element)
#(q, u) = TrialFunctions(mixed_element)
#f = Function(DG)
#a = (dot(v, q) - div(v)*u + w*div(q))*dx

#elem3 = elem2
element = elem1 + elem2# + elem2

v = TestFunction(element)
u = TrialFunction(element)

#f = Function(element)


#print v
#print u
#a = v*u*ds
#a = v('+')*u('-')*dS

#a = dot(v,u)*dx# + v*u*dx
#a = dot(grad(v), grad(u))*dx
#a = dot(grad(grad(v)),grad(grad(u)))*dx
#a = dot(div(grad(v)),div(grad(u)))*dx
#a = v*u*dx
#a = dot(grad(v('+')),grad(u('-')))*dS
#a = v*u*dx + dot(grad(v),grad(u))*dx
#a = v*u*dx + dot(grad(v),grad(u))*dx# + dot(grad(v('+')),grad(u('-')))*dS
#L = dot(v,f)*ds
