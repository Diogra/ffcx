#!/usr/bin/env python
#
# This script is the command-line interface to FFC. It parses
# command-line arguments and wraps the given form file code in a
# Python module which is then executed.

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2004-10-14 -- 2007-02-06"
__copyright__ = "Copyright (C) 2004-2007 Anders Logg"
__license__  = "GNU GPL Version 2"

# Modified by Johan Jansson 2005
# Modified by Ola Skavhaug 2006

# Python modules
import sys
import getopt

# FFC modules
sys.path.append("../")
from ffc.common.debug import *
from ffc.common.constants import *
from ffc.common.exceptions import *

def main(argv):
    "Main function"

    # Get command-line arguments
    try:
        opts, args = getopt.getopt(argv, "hvOsl:d:f:", ["help", "version", "optimize", "silent", "language=", "debug="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    # Check that we got a filename
    if opts == [("-v", "")] or opts == [("--version", "")]:
        version()
        sys.exit(0)
    elif not args:
        usage()
        sys.exit(2)

    # Set default arguments
    language = "dolfin"
    debuglevel = 0
    options = FFC_OPTIONS

    # Get options
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-v", "--version"):
            version()
            sys.exit()
        elif opt in ("-O", "--optimize"):
            options["optimize"] = True
        elif opt in ("-s", "--silent"):
            debuglevel = -1
        elif opt in  ("-l", "--language"):
            language = arg
        elif opt in  ("-d", "--debug"):
            debuglevel = int(arg)
        elif opt in  ("-f"):
            if arg in options:
                options[arg] = True
            else:
                usage()
                sys.exit(2)

    # Set debug level
    setlevel(debuglevel)

    # Print a nice message
    if debuglevel > -1:
        version()

    # Call parser and compiler for each file
    for filename in args:
        # Parse current file
        outname = __make_module(filename, language, options)
        # Compile generated file (also provide a namespace)
        ns = {}
        # Catch exceptions only if debug level is non-negative
        if debuglevel >= 1:
            execfile(outname, ns)
        else:
            try:
                execfile(outname, ns)
            except FormError, exception:
                print ""
                print "*** Error at " + str(exception.expression)
                print "*** " + exception.message
                print "*** To get more information about this error, rerun ffc with the option -d1."
            except RuntimeError, exception:
                print "*** " + str(exception)
                print "*** To get more information about this error, rerun ffc with the option -d1."
            except Exception, exception:
                print "*** " + str(exception)
                print "*** To get more information about this error, rerun ffc with the option -d1."

def usage():
    "Display usage info."
    print """\
Usage: ffc [OPTION]... input.form

  -h            display this help text and exit
  -v            display version number and exit
  -O            generate optimized code using FErari optimizations
  -s            run silently (same as debug level -1)
  -l language   specify output language, one of 'dolfin' (default),
                'latex', 'raw', 'ase' or 'xml'
  -d debuglevel specify debug level (default is 0)
  -f option     specify code generation options, one of 'blas' or 'no-gpl'

Alternatively, the following long options may be used:

  --help
  --version
  --optimize
  --language language
  --debuglevel debuglevel
"""
    return

def version():
    "Display version number."
    print("This is FFC, the FEniCS Form Compiler, version %s." % FFC_VERSION)
    print("For further information, go to http://www/fenics.org/ffc/.\n")
    return

def __make_module(filename, language, options):
    "Create Python module from given .form file and return name of module file"

    # Get prefix of file name and generate Python script file name
    prefix = filename.replace(".form", "")
    outname = prefix + ".py"
    debug("Preprocessing form file: %s --> %s" % (filename, outname))

    # Read input
    infile = open(filename, "r")
    input = infile.read()
    infile.close()

    # Generate output
    output = """\
import sys
sys.path.append("../../")
sys.path.append("./")
from ffc.old.compiler import *

name = "%s"

a = None
L = None
M = None
element = None

%s

if not (a == L == M == None):
  compile([a, L, M], name, \"%s\", %s)
elif not element == None:
  writeFiniteElement(element, name, \"%s\", %s)
else:
  print \"No forms specified, nothing to do.\"

""" % (prefix, input, language, options, language, options)

    # FIXME: Temporary while developing the UFC output
    if language == "ufc":
        output = output.replace("ffc.old.compiler", "ffc")
        output = output.replace("compile([a, L, M]", "compile(a")

    # Write output
    outfile = open(outname, "w")
    outfile.write(output)
    outfile.close()

    # Return output file name
    return outname

if __name__ == "__main__":
    main(sys.argv[1:])
