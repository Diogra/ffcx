# Copyright (C) 2012 Harish Narayanan

# Library imports and settings

cell = tetrahedron

# Material parameters for Figure 7 in HolzapfelOgden2009
a    =  Constant(cell)   #kPa
b    =  Constant(cell)
a_f  =  Constant(cell)  #kPa
b_f  =  Constant(cell)
a_s  =  Constant(cell)   #kPa
b_s  =  Constant(cell)
a_fs =  Constant(cell)   #kPa
b_fs =  Constant(cell)

# Material parameters for compressibility
kappa = Constant(cell)   #kPa
beta  = Constant(cell)

# Parameters related to time-stepping
T = 10.0
dt = T/100

# Parameters related to viscoelasticity
tau = 0.5
beta_inf = 0.25
xi = -dt/(2*tau)

# Strain energy functions for the passive myocardium
# Isochoric part
def psi_iso_inf(I1_bar, I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar):
    return (a    / (2*b)    *  exp(b*(I1_bar - 3))
          + a_f  / (2*b_f)  * (exp(b_f*(I4_f_bar - 1)**2) - 1)
          + a_s  / (2*b_s)  * (exp(b_s*(I4_s_bar - 1)**2) - 1)
          + a_fs / (2*b_fs) * (exp(b_fs*I8_fs_bar**2) - 1) )

# Volumetric part
def psi_vol_inf(J):
    return (kappa*(1/(beta**2) * (beta*ln(J) + 1/(J**beta) - 1)))

# Reference fibre, sheet and sheet-normal directions
f0 = VectorConstant(cell)
s0 = VectorConstant(cell)
n0 = VectorConstant(cell)

# Define kinematic measures in terms of the displacement
def kinematics(u):
    I = Identity(u.cell().d)    # Identity tensor
    F = I + grad(u)             # Deformation gradient
    C = F.T*F                   # Right Cauchy-Green tensor
    J = variable(det(F))        # Jacobian
    C_bar = J**(-2.0/3.0)*C     # Modified right Cauchy-Green tensor

    # Principle isotropic invariants
    I1_bar = variable(tr(C_bar))
    I2_bar = variable(0.5*(tr(C_bar)**2 - tr(C_bar*C_bar)))

    # Anisotropic (quasi) invariants
    I4_f_bar = variable(inner(f0, C_bar*f0))
    I4_s_bar = variable(inner(s0, C_bar*s0))
    I8_fs_bar = variable(inner(f0, C_bar*s0))
    I8_fn_bar = variable(inner(f0, C_bar*n0))

    return [I, F, C, J, C_bar, I1_bar, I2_bar, \
            I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar]

# Define the elastic response of the material
# Isochoric part of the second Piola-Kirchhoff stress
def S_iso_inf(u):
    # Define useful kinematic measures
    [I, F, C, J, C_bar, I1_bar, I2_bar, \
     I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar] = kinematics(u)

    # Strain energy functions
    psi_iso = psi_iso_inf(I1_bar, I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar)

    # Define the second Piola-Kirchhoff stress in terms of the invariants
    S_bar =   2*(diff(psi_iso, I1_bar) + diff(psi_iso, I2_bar))*I \
            - 2*diff(psi_iso, I2_bar)*C_bar \
            + 2*diff(psi_iso, I4_f_bar)*outer(f0, f0) \
            + 2*diff(psi_iso, I4_s_bar)*outer(s0, s0) \
            + diff(psi_iso, I8_fs_bar)*(outer(f0, s0) + outer(s0, f0)) \
            + diff(psi_iso, I8_fn_bar)*(outer(f0, n0) + outer(n0, f0))
    Dev_S_bar = S_bar - (1.0/3.0)*inner(S_bar, C)*inv(C)
    S_iso_inf = J**(-2.0/3.0)*Dev_S_bar
    return S_iso_inf

# Volumetric part of the second Piola-Kirchhoff stress
def S_vol_inf(u):
    # Define useful kinematic measures
    [I, F, C, J, C_bar, I1_bar, I2_bar, \
     I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar] = kinematics(u)
    psi_vol = psi_vol_inf(J)
    S_vol_inf = J*diff(psi_vol, J)*inv(C)
    return S_vol_inf

# Cauchy stress
def sigma(u):
    [I, F, C, J, C_bar, I1_bar, I2_bar, \
     I4_f_bar, I4_s_bar, I8_fs_bar, I8_fn_bar] = kinematics(u)
    return 1/J * P(u)*F.T

# Function spaces
scalar = FiniteElement("CG", cell, 1)
vector = VectorElement("CG", cell, 1)
tensor = TensorElement("CG", cell, 1)

# Functions
v  = Argument(vector)             # Test function
du = Argument(vector)            # Incremental displacement
#v  = TestFunction(vector)             # Test function
#du = TrialFunction(vector)            # Incremental displacement
u  = Coefficient(vector)              # Displacement from previous iteration
S_iso_inf_p = Coefficient(tensor)
S_vol_inf_p = Coefficient(tensor)
Q_p = Coefficient(tensor)

# Update stress state
S_vol_inf_n = S_vol_inf(u)
S_iso_inf_n = S_iso_inf(u)
H_p = exp(xi)*(exp(xi)*Q_p - beta_inf*S_iso_inf_p)
Q_n = beta_inf*exp(xi)*S_iso_inf_n + H_p
S_n = S_vol_inf_n + S_iso_inf_n + Q_n

# Define the variational form for the problem
I = Identity(cell.d)
M = inner(S_n, S_n)*dx # Added for UFL debugging and profiling
F = inner((I + grad(u))*S_n, grad(v))*dx
J = derivative(F, u, du)

forms = []
forms += [M]
forms += [F]
forms += [J]

du2 = Coefficient(vector)
dv2 = Coefficient(vector)
Je = replace(J, {du:du2,v:dv2}).integrals()[0].integrand()

expressions = [Je]
